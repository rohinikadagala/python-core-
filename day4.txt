working with builtin functions:
-------------------------------
print()
-------
the print() is a used to print the value to the output screen/window.

in python2.x versions,the print is a keyword not a function.

in python3.x versions,the print is a function not a keyword.

	syntax
	------
	print(value_1,value_2,...,value_n,sep=" ",end="\n",
	      file=sys.stdout,flush=False)

		(or)

	print(*values,sep=" ",end="\n",file=sys.stdout,flush=False)

ex1:
----
	demo.py
	-------
print("hai")

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
hai

ex2:
----
	demo.py
	-------
print("hai")
print("hai","siva")
print("hai","siva","krishna")
print("hai","siva","krishna",sep=",")
print("hai","siva","krishna",sep=":")
print("hai","siva","krishna",sep="==>")

	output
	-------
C:\Users\Lenovo\Desktop>python demo.py
hai
hai siva
hai siva krishna
hai,siva,krishna
hai:siva:krishna
hai==>siva==>krishna

ex3:
----
	demo.py
	--------
print("hai")
print("siva")
print("krishna")
print("*"*30)
print("hai",end=" ")
print("siva",end=" ")
print("krishna")

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
hai
siva
krishna
******************************
hai siva krishna

type()
------
in python2.x versions, the type() to return the type of the object.

in python3.x versions, the type() to return the class of the object.

ex1: in interactive mode
----
>>> x=10
>>> x,type(x)
(10, <class 'int'>)

>>> y=2.3
>>> y
2.3
>>> type(y)
<class 'float'>

ex2: in Batch mode
----

	demo.py
	-------
x,y=10,2.3
print(x,type(x))
print(y)
print(type(y))

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
10 <class 'int'>
2.3
<class 'float'>

id()
----
to return the address of the object 
	(or)
to identify the object.

ex:
---
	demo.py
	-------
x,y=10,2.3
print(id(x))
print(id(y))

	output
	------
C:\Users\Lenovo\Desktop>python demo.py
140730985604168
2633083764400

Python Datatypes:
-----------------
Python is a Dynamically typed language.

in python,every datatype having it's own class.

the python supported Datatype's are,

	1).Numerical/Number Datatypes
		a).int
		b).float
		c).complex

	2).Boolean Datatype's

	3).Text Sequence Datatype's
		a).string

	4).Number Sequence Datatype's
		a).list
		b).tuple
		c).range
		d).xrange (it support only python2.x versions)

	5).Set Datatype's
		a).set
		b).frozenset

	6).Mapping Datatype's
		a).dictionary

	7).Binary Sequence Datatype's
		a).bytes
		b).bytearray
		c).memoryview

	8).None Datatype's


Numerical/Number Datatypes:
----------------------------
these datatypes are used to store the numerical values.

these datatypes can be categorized into 3-types, they are

	1).Integer Number Datatype's

	2).Floating Point Number Datatype's

	3).Complex Number Datatype's

Integer Number Datatype's:
---------------------------
the Integer Number Datatype's are used to store the integer values.

in python,the Integer Number Datatype having "int" class

in python2.x versions, the Integer Number Datatype can be categorized into two types, they are 

	int
	long

but in python3.x versions, there's no long datatype.

ex:
---
>>> x=10
>>> x
10
>>> type(x)
<class 'int'>

>>> y=34490976868
>>> y
34490976868
>>> type(y)
<class 'int'>

note:
----
in python,we can assign any number system as a integer object.

	Binary			--> 0b

	Octal			--> 0o

	Decimal
	
	Hexadecimal		--> 0x

>>> x=0b1010 #binary
>>> type(x)
<class 'int'>

>>> y=0o37 #octal
>>> type(y)
<class 'int'>

>>> z=39 #decimal
>>> type(z)
<class 'int'>

>>> p=0x2c #hexadecimal
>>> type(p)
<class 'int'>

Floating Point Number Datatype's:
----------------------------------
the Floating Point Number Datatype's are used to store the floating point values.

in python,the Floating Point Number Datatype having "float" class.

ex:
---
>>> x=2.3
>>> x
2.3
>>> type(x)
<class 'float'>

>>> y=2.3e2
>>> y
230.0
>>> type(y)
<class 'float'>

>>> z=2.3e-2
>>> z
0.023
>>> type(z)
<class 'float'>

note:
-----
in python,we can assign only decimal number system as a floating point object.

>>> x=0b1010.01 #binary
SyntaxError: invalid syntax

>>> y=0o37.3 #octal
SyntaxError: invalid syntax

>>> z=0x2c.3 #hexadecimal
SyntaxError: invalid syntax

>>> p=39.3 #decimal
>>> type(p)
<class 'float'>

Complex Number Datatype's:
---------------------------
these datatypes are used to store the complex numbers

in python,the Complex Number Datatype having "complex" class.

	c=a+bj

ex:
---
>>> x=2+3j
>>> x
(2+3j)
>>> type(x)
<class 'complex'>

>>> y=3j
>>> y
3j
>>> type(y)
<class 'complex'>

>>> z=2+3J
>>> z
(2+3j)
>>> type(z)
<class 'complex'>

>>> a=2+3k
SyntaxError: invalid decimal literal

>>> b=2+3i
SyntaxError: invalid decimal literal


note:
------
int()		--> to convert any type of data into integer
		--> by default return value is 0

float()		--> to convert any type of data into floating point number
		--> by default return value is 0.0

complex()	--> to convert any type of data into complex number type
		--> by default return value is 0j


ex:
----
>>> x=int()
>>> x
0
>>> y=float()
>>> y
0.0
>>> z=complex()
>>> z
0j

ex2:
----
>>> x=5 #int
>>> x
5
>>> float(x)
5.0
>>> complex(x)
(5+0j)

ex3:
----
>>> y=2.3 #float
>>> y
2.3
>>> int(y)
2
>>> complex(y)
(2.3+0j)

ex4:
----
>>> z=2+3j #complex
>>> z
(2+3j)
>>> int(z)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'complex'
>>> float(z)
TypeError: float() argument must be a string or a real number, not 'complex'

Boolean Datatype's:
--------------------
the Boolean Datatype's are used to store the boolean values.

in python, the Boolean Datatype having 'bool' class.

in python,we can represent the boolean values like True and False.

ex:
---
>>> x=True
>>> x
True
>>> type(x)
<class 'bool'>

>>> y=False
>>> y
False
>>> type(y)
<class 'bool'>

>>> z=false
NameError: name 'false' is not defined. Did you mean: 'False'?

>>> a=true
NameError: name 'true' is not defined. Did you mean: 'True'?

note:
-----
bool()		--> to convert the any type of data into boolean datatype.
		--> by default return value is False

0,0.0,0+0j,0.0+0.0j,0+0.0j,0.0+0j	--> False

remaining all values are treated as True.

ex1:
----
>>> x=bool()
>>> x
False

ex2:
----
>>> x=5
>>> y=0
>>> z=1
>>> bool(x)
True
>>> bool(y)
False
>>> bool(z)
True

ex3:
----
>>> x=2.3
>>> y=0.0
>>> z=1.0
>>> bool(x)
True
>>> bool(y)
False
>>> bool(z)
True

ex4:
----
>>> x=0j
>>> y=0+2j
>>> z=0.0+0j
>>> a=2+0j
>>> b=2+3j
>>> bool(x)
False
>>> bool(y)
True
>>> bool(z)
False
>>> bool(a)
True
>>> bool(b)
True


True	--> 1,1.0,1+0j
False	--> 0,0.0,0+0j/0j

ex:
---
>>> x=True
>>> y=False
>>> int(x)
1
>>> int(y)
0
>>> float(x)
1.0
>>> float(y)
0.0
>>> complex(x)
(1+0j)
>>> complex(y)
0j

string datatype:
----------------
in python, the string datatype having "str" class

we can create a string object by using ' ' or " "

in python,the string object is a sequence object i.e., insertion order is preserved(both input order and output order will be same)

in python,the string object is a iterable object i.e.,we can apply the iterations(we can use repeated purpose).

in python,the string object is a immutable object i.e.,we can't modify the data.


ex:
---
>>> x='siva'
>>> x
'siva'
>>> type(x)
<class 'str'>

>>> y="krishna"
>>> y
'krishna'
>>> type(y)
<class 'str'>

list datatype:
--------------
in python, the list datatype having "list" class

we can create a list object by using [ ] or by calling list() or 		list(iterableobj)

in python,the list object is a sequence object

in python,the list object is a iterable object

in python,the list object is a mutable object i.e., we can modify the data.

ex:
----
>>> x=[6,3,8,9]
>>> x
[6, 3, 8, 9]
>>> type(x)
<class 'list'>

Tuple datatype:
-----------------
in python, the tuple datatype having "tuple" class.

we can create a tuple object by uisng ( ) or by calling tuple() or 		tuple(iterableobj)

in python, the tuple object is a sequence,iterable and immutable object.

ex:
---
>>> x=(5,9,8,14)
>>> x
(5, 9, 8, 14)
>>> type(x)
<class 'tuple'>

set datatype:
-------------
in python,the set datatype having "set" class

we can create a set object by using { } or by calling set() or 			set(iterableobj)

in python, the set object is a non-sequence object i.e., insertion order is not preserved(both input order and output order always will not be same).

in python,the set object is a iterable and mutable object.

ex:
---
>>> x={6,9,13,5}
>>> x
{9, 13, 5, 6}
>>> type(x)
<class 'set'>


frozenset datatype:
-------------------
in python, the frozenset datatype having "frozenset" class

we can create a frozenset object by using frozenset() or 			frozenset(iterableobj)

in python, the frozenset object is non-sequence,iterable and immutable object.

ex:
---
>>> x=frozenset([6,9,34,21])
>>> x
frozenset({9, 34, 21, 6})
>>> type(x)
<class 'frozenset'>

note:
------
str()		--> to convert any type of data into string type of data
		--> by default return value is empty string i.e., ''

ex:
---
>>> x=str()
>>> x
''

ex2:
----
>>> str(5)
'5'
>>> str(2.3)
'2.3'
>>> str(3j)
'3j'
>>> str(True)
'True'
>>> str([5,3,7,2])
'[5, 3, 7, 2]'
>>> str((5,2,7,1))
'(5, 2, 7, 1)'
>>> str({6,3,8,2})
'{8, 2, 3, 6}'
>>> str(frozenset([5,3,7,2]))
'frozenset({2, 3, 5, 7})'


note:
-----
str()		--> to convert any type of data into string type of data
		--> by default return value is empty string i.e., ''

ex1:
-----
>>> x=str()
>>> x
''

ex2:
----
>>> x=5 #int
>>> y=2.3 #float
>>> z=2+3j #complex
>>> a=False #bool
>>> b=[3,2,6,1] #list
>>> c=(3,9,1,8) #tuple
>>> d=frozenset([5,3,9,2]) #frozenset
>>> e={7,3,9,2} #set
>>> str(x)
'5'
>>> str(y)
'2.3'
>>> str(z)
'(2+3j)'
>>> str(a)
'False'
>>> str(b)
'[3, 2, 6, 1]'
>>> str(c)
'(3, 9, 1, 8)'
>>> str(d)
'frozenset({9, 2, 3, 5})'
>>> str(e)
'{9, 2, 3, 7}'


list()		--> to convert any type of iterable object into list object
		--> by default return value is empty list i.e., []

ex1:
----
>>> x=list()
>>> x
[]

ex2:
----
>>> x="siva" #str
>>> y=(4,3,7,2) #tuple
>>> z={9,3,7,2} #set
>>> a=frozenset([6,3,8,2]) #frozenset
>>> b=[5,3,7,2] #list
>>> c=34 #int
>>> list(x)
['s', 'i', 'v', 'a']
>>> list(y)
[4, 3, 7, 2]
>>> list(z)
[9, 2, 3, 7]
>>> list(a)
[8, 2, 3, 6]
>>> list(b)
[5, 3, 7, 2]
>>> list(c)
TypeError: 'int' object is not iterable


tuple()		--> to convert any type of iterable object into tuple object
		--> by default return value is empty tuple i.e., ()


ex1:
----
>>> x=tuple()
>>> x
()

ex2:
----
>>> x="siva" #str
>>> y=[5,3,7,9] #list
>>> z=(6,3,8,1) #tuple
>>> a={5,9,3,7} #set
>>> b=frozenset([6,3,8,9]) #frozenset
>>> c=34 #int
>>> tuple(x)
('s', 'i', 'v', 'a')
>>> tuple(y)
(5, 3, 7, 9)
>>> tuple(z)
(6, 3, 8, 1)
>>> tuple(a)
(9, 3, 5, 7)
>>> tuple(b)
(8, 9, 3, 6)
>>> tuple(c)
TypeError: 'int' object is not iterable

set()		--> to convert any type of iterable object into set object
		--> by default return value is empty set i.e., set()

ex1:
----
>>> x=set()
>>> x
set()

ex2:
----
>>> x="siva" #str
>>> y=[6,4,8,3] #list
>>> z=(6,3,8,1) #tuple
>>> a={5,3,7,9} #set
>>> b=frozenset((5,9,7,3)) #frozenset
>>> c=34 #int
>>> set(x)
{'v', 's', 'i', 'a'}
>>> set(y)
{8, 3, 4, 6}
>>> set(z)
{8, 1, 3, 6}
>>> set(a)
{9, 3, 5, 7}
>>> set(b)
{9, 3, 5, 7}
>>> set(c)
TypeError: 'int' object is not iterable


frozenset()	--> to convert any type of iterable object into frozenset
		--> by default return value is empty frozenset i.e.,
		    frozenset()

ex1:
----
>>> x=frozenset()
>>> x
frozenset()

ex2:
----
>>> x="siva" #str
>>> y=[6,4,8,3] #list
>>> z=(6,3,8,1) #tuple
>>> a={5,3,7,9} #set
>>> b=frozenset((5,9,7,3)) #frozenset
>>> c=34 #int
>>> frozenset(x)
frozenset({'v', 's', 'i', 'a'})
>>> frozenset(y)
frozenset({8, 3, 4, 6})
>>> frozenset(z)
frozenset({8, 1, 3, 6})
>>> frozenset(a)
frozenset({9, 3, 5, 7})
>>> frozenset(b)
frozenset({9, 3, 5, 7})
>>> frozenset(c)
TypeError: 'int' object is not iterable

Dictionary Datatype:
--------------------
in python, the dictionary datatype having "dict" class

we can create a dict object by using {} or by calling dict()

the dict object contains group of key-value pairs, each key-value pair act as a one item in our dict object.

	{key_1:value_1,key_2:value_2,...,key_n:value_n}
	 -------------,-------------,    -------------
	      |		    |		      |
	    item_1       item_2             item_n

the dict object is a mutable object but key's must be immutable and values are either mutable or immutable objects.

from python3.4+ versions onwards, the dict object act as a sequence object.

ex:
---
>>> x={'name':'siva','sal':3000,'dno':10,'add':'hyd'}
>>> x
{'name': 'siva', 'sal': 3000, 'dno': 10, 'add': 'hyd'}
>>> type(x)
<class 'dict'>

note:
-----
dict()		--> to create a dict object
		--> by default return value is empty dict i.e., {}

ex:
---
>>> x=dict()
>>> x
{}


None Datatype:
---------------
in python,the None datatype having "NoneType" class.

in python,at the time declaring the variables compulssory to assign the value but at that time you dont known which value we want to assign, in that case simply we are assign None value.

ex:
---
	C Programming
	-------------
#include<stdio.h>
void main()
{
    int x,y,z;
    x=10;
    y=20;
    z=x+y;
    printf("%d",z);
}

output:
------
30


	Python Programming
	------------------
x=y=z=None
x=10
y=20
z=x+y
print(z)

output:
------
30

ex2:
----
x=None
print(x)
print(type(x))

output:
-------
None
<class 'NoneType'>








	

