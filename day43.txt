set collection/data structure:
------------------------------
in python, the set datatype having 'set' class

we can create a set object by using {}  or by calling set() or 			set(iterableobj)

>>> x={}
>>> x
{}
>>> type(x)
<class 'dict'>

>>> y=set()
>>> y
set()
>>> type(y)
<class 'set'>

>>> z={6,3,9,12}
>>> z
{9, 3, 12, 6}
>>> type(z)
<class 'set'>

>>> a=set("siva")
>>> a
{'s', 'a', 'v', 'i'}
>>> type(a)
<class 'set'>

>>> b=set([5,3,9,7])
>>> b
{9, 3, 5, 7}
>>> type(b)
<class 'set'>

in set object, insertion order is not preserved because of that reason the set object is a non-sequence object.

the set object is a mutable object but it allows only immutable objects.

>>> x={2,3.2,4j,False,"siva",(5,6)}
>>> x
{False, 2, 3.2, (5, 6), 'siva', 4j}

>>> y={2,3.2,4j,False,"siva",[5,6]}
TypeError: unhashable type: 'list'

>>> z=set([2,3.2,4j,False,"siva",(5,6)])
>>> z
{False, 2, 3.2, 4j, (5, 6), 'siva'}

>>> a=set([2,3.2,4j,False,"siva",[5,6]])
TypeError: unhashable type: 'list'

the set object dont allow the duplicate elements, by mistakely we are passng the duplicate elements,in that case the set allows only first inserted elements.

>>> a={5,9,7,12,9,7,12,18,5}
>>> a
{18, 5, 7, 9, 12}

>>> b={True,0,1,False}
>>> b
{0, True}

>>> c={False,0,1,True}
>>> c
{False, 1}

the set object allows both homogenious and hetrogenious elements.

	homogenious(similar/same type of elements)
	-----------
>>> a={5,9,23,7}
>>> a
{9, 23, 5, 7}

>>> b={2.3,5.3,9.3,7.1}
>>> b
{9.3, 2.3, 5.3, 7.1}

	hetrogenious(different type of elements)
	-------------
>>> x={2,3.2,4j,False,"siva",(5,6)}
>>> x
{False, 2, 3.2, (5, 6), 'siva', 4j}

the set object dont support both indexing and slicing concept's.

>>> x={2,3.2,4j,False,"siva",(5,6)}
>>> x
{False, 2, 3.2, (5, 6), 'siva', 4j}

>>> x[0] #indexing
TypeError: 'set' object is not subscriptable

>>> x[:3] #slicing
TypeError: 'set' object is not subscriptable

the set object don't support nested set concept.

>>> x={2,3.2,{4j,False},"siva"}
TypeError: unhashable type: 'set'

working with builtin functions:
-------------------------------
>>> x={5,9,3,7}
>>> x
{9, 3, 5, 7}
>>> len(x)
4
>>> min(x)
3
>>> max(x)
9
>>> sum(x)
24
>>> sorted(x)
[3, 5, 7, 9]
>>> sorted(x,reverse=True)
[9, 7, 5, 3]
>>> reversed(x)
TypeError: 'set' object is not reversible

note:
-----
the reversed() is applicable only on top of sequence objects.

working with set class methods:
--------------------------------
	if we want to display all the available set class methods with syntax and description, in that case we are using help() function.

	help(set)

	if we want to display the list of all the available set class method names without syntax and description, in that case we are using dir() function.

	dir(set)


add()
-----
to add an element into the set object.

	setobj.add(element)

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> type(x)
<class 'set'>
>>> x.add(9)
>>> x
{2.3, 3, 9, 4j, 'siva'}
>>> x.add((5,4))
>>> x
{2.3, 3, 9, (5, 4), 4j, 'siva'}
>>> x.add(False)
>>> x
{False, 2.3, 3, 9, (5, 4), 4j, 'siva'}
>>> x.add([5,3])
TypeError: unhashable type: 'list'	


clear()
-------
to clear the set object i.e., to remove all the elements from the set object at a time.

	setobj.clear()

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> len(x)
4
>>> x.clear()
>>> x
set()
>>> len(x)
0

copy()
------
to create a shallow copy of a set object.

	setobj.copy()

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> y=x.copy()
>>> y
{2.3, 3, 4j, 'siva'}

discard()
--------
to remove an particular element from the set object.

	setobj.discard(element)

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> x.discard(4j)
>>> x
{2.3, 3, 'siva'}
>>> x.discard(100)

>>> x
{2.3, 3, 'siva'}

remove()
--------
to remove an particular element from the set object.

	setobj.remove(element)

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> x.remove(4j)
>>> x
{2.3, 3, 'siva'}
>>> x.remove(100)
KeyError: 100
>>> x
{2.3, 3, 'siva'}

pop()
-----
to remove an element from left to right.

	setobj.pop()

ex:
---
>>> x={3,2.3,4j,"siva"}
>>> x
{2.3, 3, 4j, 'siva'}
>>> x.pop()
2.3
>>> x
{3, 4j, 'siva'}
>>> x.pop()
3
>>> x
{4j, 'siva'}

update()
--------
to update the set object.

	setobj.update(iterableobj)

ex1:
----
>>> x={3,2.3,4j,"siva"}
>>> y=[4j,"rama",9,3,2.3]
>>> x
{2.3, 3, 4j, 'siva'}
>>> y
[4j, 'rama', 9, 3, 2.3]
>>> x.update(y)
>>> x
{2.3, 3, 'rama', 9, 4j, 'siva'}
>>> y
[4j, 'rama', 9, 3, 2.3]

ex2:
----
>>> x={3,2.3,4j,"siva"}
>>> y="rama"
>>> x.update(y)
>>> x
{2.3, 3, 'm', 4j, 'a', 'siva', 'r'}
>>> y
'rama'


working with mathmatical set operations:
-----------------------------------------
ex1:
----
>>> x={1,2,3,4}
>>> y={3,4,5,6}
>>> x
{1, 2, 3, 4}
>>> y
{3, 4, 5, 6}

>>> x.union(y)
{1, 2, 3, 4, 5, 6}
>>> x|y
{1, 2, 3, 4, 5, 6}

>>> x.intersection(y)
{3, 4}
>>> x&y
{3, 4}

>>> x.difference(y)
{1, 2}
>>> x-y
{1, 2}
>>> y.difference(x)
{5, 6}
>>> y-x
{5, 6}


>>> x.symmetric_difference(y)
{1, 2, 5, 6}
>>> x^y
{1, 2, 5, 6}
>>> x-y|y-x
{1, 2, 5, 6}


ex2:
----
>>> x={1,2,3,4,5,6}
>>> y={1,3,5}
>>> z={2,4,6,8}
>>> x
{1, 2, 3, 4, 5, 6}
>>> y
{1, 3, 5}
>>> z
{8, 2, 4, 6}
>>> x.issuperset(y)
True
>>> y.issubset(x)
True
>>> x.issuperset(z)
False
>>> z.issubset(x)
False

assignment-1:
--------------
write a python program,to find the GCD/HCF of given two numbers?

	input			output
	-----			-------
	6,12			6

	8,12			4

assignment-2:
-------------
write a python program,to find the LCM of given two numbers?

	input			output
	-----			-------
	3,5			15

	2,4			4

assignment-3:
--------------
write a python program to find the no.of permutations of given N and R values?

	input			output
	-----			-------
	5,2			20


assignment-4:
--------------
write a python program to find the no.of combinations of given N and R values?

	input			output
	-----			-------
	5,2			10



