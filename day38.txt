assignment-1:
--------------
wap take the list object as a input from the user and print the no_of elements into that list,with out using len() function?

	input			output
	-----			-------
	[5,3,8,2]		4

sol:
----
x=eval(input("enter your list object: "))
c=0
for ele in x:
    c+=1
print(c)



assignment-2:
--------------
wap take the list object as a input from the user and print the sum_of elements into that list,with out using sum() function?

	input			output
	-----			-------
	[5,3,8,2]		18

sol:
----
x=eval(input("enter your list object: "))
s=0
for ele in x:
    s+=ele
print(s)


assignment-3:
--------------
wap take the list object as a input from the user and print the minimum element from that list,with out using min() function?

	input			output
	-----			-------
	[5,3,8,2]		2

sol:
----
x=eval(input("enter your list object: "))
m=x[0]
for ele in x:
    if m>ele:
        m=ele        
print(m)

assignment-4:
--------------
wap take the list object as a input from the user and print the maximum element from that list,with out using max() function?

	input			output
	-----			-------
	[5,3,8,2]		8

sol:
----
x=eval(input("enter your list object: "))
m=x[0]
for ele in x:
    if m<ele:
        m=ele        
print(m)



assignment-5:
--------------
wap take the list object as a input from the user and print the elements in ascending order from that list,with out using sorted() function?

	input			output
	-----			-------
	[5,3,8,2]		[2,3,5,8]

sol:
----
x=eval(input("enter your list object: "))
for i in range(len(x)):
    for j in range(i+1,len(x)):
        if x[i]>x[j]:
            x[i],x[j]=x[j],x[i]
print(x)


working with list class methods:
--------------------------------
	if we want to display all the available list class methods with syntax and description, in that case we are using help() function.

	help(list)

	if we want to display the list of all the available list class method names without syntax and description, in that case we are using dir() function.

	dir(list)



examples of list class dunder methods:
---------------------------------------
ex1:
---
>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x+y
[1, 2, 3, 4, 5, 6]
>>> x.__add__(y)
[1, 2, 3, 4, 5, 6]

ex2:
----
>>> x=[1,2,3]
>>> y=3
>>> x*y
[1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> x.__mul__(y)
[1, 2, 3, 1, 2, 3, 1, 2, 3]


ex3:
----
>>> x=[1,2,3]
>>> 3 in x
True
>>> x.__contains__(3)
True

ex4:
---
>>> x=[1,2,3]
>>> len(x)
3
>>> x.__len__()
3

ex5:
---
>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x==y
False
>>> x.__eq__(y)
False

>>> x!=y
True
>>> x.__ne__(y)
True

>>> x>y
False
>>> x.__gt__(y)
False

>>> x<y
True
>>> x.__lt__(y)
True

>>> x<=y
True
>>> x.__le__(y)
True

>>> x>=y
False
>>> x.__ge__(y)
False


examples of list class normal methods:
---------------------------------------
append()
--------
to add an element into the list object at the end of the previuos elements in our list object.

	listobj.append(element)

ex:
---
>>> x=[2,3.2,4j,False]
>>> x
[2, 3.2, 4j, False]
>>> x.append(9)
>>> x
[2, 3.2, 4j, False, 9]
>>> x.append("siva")
>>> x
[2, 3.2, 4j, False, 9, 'siva']
>>> x.append([5,3])
>>> x
[2, 3.2, 4j, False, 9, 'siva', [5, 3]]

clear()
-------
to clear the list object i.e., to remove all the elements from the list object at a time.

	listobj.clear()

ex:
---
>>> x=[2,3.2,4j,False]
>>> x
[2, 3.2, 4j, False]
>>> len(x)
4
>>> x.clear()
>>> x
[]
>>> len(x)
0

copy()
------
to create a shallow copy of a list object.

	listobj.copy()

ex:
---
>>> x=[2,3.2,4j,False]
>>> y=x #hard copy
>>> z=x.copy() #shallow copy
>>> x
[2, 3.2, 4j, False]
>>> y
[2, 3.2, 4j, False]
>>> z
[2, 3.2, 4j, False]
>>> id(x)
2043096647296
>>> id(y)
2043096647296
>>> id(z)
2043093215040

count()
-------
to return the no.of occurencess of given element in a list object.

	listobj.count(element)

ex:
---
>>> x=[10,20,30,10,40,30,10,20,30,10]
>>> x
[10, 20, 30, 10, 40, 30, 10, 20, 30, 10]
>>> x.count(10)
4
>>> x.count(20)
2
>>> x.count(30)
3
>>> x.count(40)
1
>>> x.count(50)
0

extend()
--------
to extend the list object with the elements of given iterable object.

	listobj.extend(iterableobj)

ex:
---
>>> x=[1,2,3] #list
>>> y=[4,5,6] #list
>>> x+y #concatination
[1, 2, 3, 4, 5, 6]
>>> x
[1, 2, 3]
>>> y
[4, 5, 6]
>>> x.append(y) #appending
>>> x
[1, 2, 3, [4, 5, 6]]
>>> y
[4, 5, 6]
>>> a=[1,2,3] #list
>>> b=[4,5,6] #list
>>> a.extend(b) #extending
>>> a
[1, 2, 3, 4, 5, 6]
>>> b
[4, 5, 6]

ex2:
----
>>> x=[1,2,3] #list
>>> y="siva" #str
>>> x+y # concatination
TypeError: can only concatenate list (not "str") to list
>>> x
[1, 2, 3]
>>> y
'siva'
>>> x.append(y) #appending
>>> x
[1, 2, 3, 'siva']
>>> y
'siva'
>>> a=[1,2,3] #list
>>> b="siva" #str
>>> a.extend(b) #extending
>>> a
[1, 2, 3, 's', 'i', 'v', 'a']
>>> b
'siva'

ex3:
----
>>> x=[1,2,3] #list
>>> y=5 #int
>>> x.append(y)
>>> x
[1, 2, 3, 5]
>>> y
5

>>> a=[1,2,3] #list
>>> b=5 #int
>>> a.extend(b)
TypeError: 'int' object is not iterable

assignment-1:
--------------
wap take the list object as a input from the user,to convert that list into two sublists, one sub list contains even numbers in ascending order and another sublist contains odd numbers in descending order?

	input			output
	-----			-------
[5,2,8,3,12,35,1,6,9]		[[2,6,8,12],[35,9,5,3,1]]


assignment-2:
-------------
wap take the nested list object as a input from the user,to convert that nested list into flatted/single list?

	input			output
	------			-------
[[4,2,7],[1,9,3]]		[4,2,7,1,9,3]

assignment-3:
-------------
wap take the list object as a input from the user and to return the sum of odd numbers in that list?

	input			output
	-----			-------
[5,2,8,3,12,35,1,6,9]		53



