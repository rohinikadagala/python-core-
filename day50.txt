bytes()
-------
to return the bytes object, the bytes object is a immutable object.

>>> x=[5,9,35,67]
>>> x
[5, 9, 35, 67]
>>> type(x)
<class 'list'>
>>> y=bytes(x)
>>> y
b'\x05\t#C'
>>> type(y)
<class 'bytes'>
>>> y[0]=50
TypeError: 'bytes' object does not support item assignment

bytearray()
-----------
to return the bytearray object, the byte array object is a mutable object.

>>> x=[5,9,35,67]
>>> x
[5, 9, 35, 67]
>>> type(x)
<class 'list'>
>>> z=bytearray(x)
>>> z
bytearray(b'\x05\t#C')
>>> type(z)
<class 'bytearray'>
>>> id(z)
2187252187248
>>> z[0]
5
>>> z[0]=120
>>> z
bytearray(b'x\t#C')
>>> z[0]
120
>>> id(z)
2187252187248

memoryview()
-------------
to return the memory view object.

ex:
---
>>> x=[5,32,90,64]
>>> x
[5, 32, 90, 64]
>>> type(x)
<class 'list'>
>>> y=bytes(x)
>>> y
b'\x05 Z@'
>>> type(y)
<class 'bytes'>
>>> m=memoryview(y)
>>> m
<memory at 0x000001FD42405000>
>>> type(m)
<class 'memoryview'>
>>> for i in m:
        print(i)

5
32
90
64

>>> list(m)
[5, 32, 90, 64]

>>> m[0]
5
>>> id(m)
2187249864704
>>> m[0]=54
TypeError: cannot modify read-only memory

ex2:
----
>>> x=memoryview(bytearray([5,34,69,119]))
>>> x
<memory at 0x000001FD42404B80>
>>> type(x)
<class 'memoryview'>
>>> list(x)
[5, 34, 69, 119]
>>> x[0]
5
>>> id(x)
2187249863552
>>> x[0]=50
>>> x
<memory at 0x000001FD42404B80>
>>> id(x)
2187249863552
>>> list(x)
[50, 34, 69, 119]
>>> bytearray(x)
bytearray(b'2"Ew')

eval()
-----
to read one or more input values from the user with homogenious and hetrogenious elements.

the eval() to perform the implicit type conversion.

in eval() our input values are seperated by "," only

ex1:
---
x,y,z=eval(input())
print(x+y+z)

output1:
--------
3,4,2
9

output2:
--------
3,2.3,4j
(5.3+4j)

output3:
-------
3 2 4
SyntaxError: invalid syntax

enumerate()
-----------
the enumerate() to return the enumerate object.

the enumerate object contains elements with indexes in the form of tuple.

	enumerate(iterableobj,start=0)

ex1:
---
x=[5,3.2,4j,False]
i=0
while i<len(x):
    print(i,x[i])
    i+=1

	(or)

x=[5,3.2,4j,False]
for i in range(len(x)):
    print(i,x[i])

	(or)

x=[5,3.2,4j,False]
for i,j in enumerate(x):
    print(i,j)

output:
------
0 5
1 3.2
2 4j
3 False

ex2:
----
x=[5,3.2,4j,False]
y=enumerate(x,start=100)
print(y)
print(type(y))
for index,value in y:
    print(index,value)

output:
-------
<enumerate object at 0x000001E7485D5490>
<class 'enumerate'>
100 5
101 3.2
102 4j
103 False

ex3:
----
print(list(enumerate([5,3.2,4j,False])))

output:
-------
[(0, 5), (1, 3.2), (2, 4j), (3, False)]

round()
------
to return the round figure value of the given number.

	round(number,[decimal_places])

ex1:
----
>>> round(2.49)
2
>>> round(2.50)
2
>>> round(2.51)
3

ex2:
----
>>> x=2.372831
>>> round(x)
2
>>> round(x,1)
2.4
>>> round(x,2)
2.37
>>> round(x,3)
2.373
>>> round(x,4)
2.3728

pow()
-----
to return the power of the given two values.

	pow(x,y)	--> x**y

	pow(x,y,z)	--> x**y%z

ex:
---
>>> pow(2,3)
8
>>> pow(3,2)
9
>>> pow(2,3,3)
2
>>> pow(2,3,2)
0
>>> pow(3,2,3)
0
>>> pow(3,2,2)
1
>>> pow(2)
TypeError: pow() missing required argument 'exp' (pos 2)
>>> pow(2,3,1,4)
TypeError: pow() takes at most 3 arguments (4 given)



