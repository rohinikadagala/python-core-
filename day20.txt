Membership Operators:
---------------------
these operators are used to seraching/finding an element/char/substr in a given iterable object.

in python,the membership operators are in, not in

if element/char/substr is find/match in that case the "in" operator to return True otherwise the "in" operator to return False.

if element/char/substr is not find/match in that case the "not in" operator to return True otherwise the "not in" operator to return False.

ex1:
----
>>> x="siva"
>>> 'i' in x
True
>>> 'b' not in x
True
>>> 'k' in x
False
>>> 'v' not in x
False
>>> 'I' in x
False

ex2:
----
>>> y="hai siva krishna"
>>> 'hai' in y
True
>>> 'hello' in y
False
>>> 'bye' not in y
True
>>> 'krish' in y
True
>>> 'Hai' in y
False
>>> 'Hai'.casefold() in y
True

ex3:
-----
>>> z=[5,3,7,9]
>>> 8 in z
False
>>> 9 in z
True
>>> 5 not in z
False
>>> 6 not in z
True

Operator Presidency:
--------------------
whenever our expression contains multiple operators,in that case we need to ientify which operator is executed first,which operator is executed second,...,which operator is executed last by using operator presidency concept.

in our expression,the multiple operators having the same priority,in that case we are follow the left to right associativity.

in arithmetic operators we are follow the PEMDAS rule.

	P	--> ()
	E	--> **
	MD	--> *,/,//,%
	AS	--> +,-

ex1:
----
>>> x=3+2*3-(3+1)/2**2%3
>>> x
8.0

	3+2*3-(3+1)/2**2%3
	3+2*3-4/2**2%3
	3+2*3-4/4%3
	3+6-4/4%3
	3+6-1.0%3
	3+6-1.0
	9-1.0
	8.0

ex2:
----
>>> y=6%3**2-5//(2+3)*3
>>> y
3

	6%3**2-5//(2+3)*3
	6%3**2-5//5*3
	6%9-5//5*3
	6-5//5*3
	6-1*3
	6-3
	3

in logical operators,we are follow the and,or

ex1:
----
>>> z=False and not True or False and True or not False and False
>>> z
False

	False and not True or False and True or not False and False
	False or False and True or not False and False
	False or False or not False and False
	False or False or False
	False or False
	False

ex2:
----
>>> a,b,c=False,not True,True
>>> a and not c or not b and a or not c and not a or c
True

	a and not c or not b and a or not c and not a or c
	False or not b and a or not c and not a or c
	False or False or not c and not a or c
	False or False or False or c
	False or False or c
	False or c
	True


in bitwise operators,we are follow the ~,<< or >>,&,^,|

ex1:
----
>>> x=3&4|3<<2^4
>>> x
8

	3&4|3<<2^4
	3&4|12^4
	0|12^4
	0|8
	 8


when compared to arithmetic and bitwise operators, the arithmetic operators are the highest priority.

ex:
---
>>> x=3+2|3*4&2-(3<<2)^3**2
>>> x
13

	3+2|3*4&2-(3<<2)^3**2
	3+2|3*4&2-12^3**2
	3+2|3*4&2-12^9
	3+2|12&2-12^9
	5|12&2-12^9
	5|12&-10^9
	5|4^9
	5|13
	13




	


























