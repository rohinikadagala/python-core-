Tuple DataStructure/Collection:
-------------------------------
in python,the tuple datatype having tuple class.

we can create a tuple object by using () or by calling tuple() or 		tuple(iterableobj)

>>> x=()
>>> x
()
>>> type(x)
<class 'tuple'>

>>> y=tuple()
>>> y
()
>>> type(y)
<class 'tuple'>

>>> z=(5,3,7,2)
>>> z
(5, 3, 7, 2)
>>> type(z)
<class 'tuple'>

>>> a=tuple("siva")
>>> a
('s', 'i', 'v', 'a')
>>> type(a)
<class 'tuple'>

>>> b=tuple([5,3,7,2])
>>> b
(5, 3, 7, 2)
>>> type(b)
<class 'tuple'>

>>> c=tuple(453)
TypeError: 'int' object is not iterable

in python, the tuple object is a immutable object but it allows both mutable and immutable objects.

>>> x=(3,2.3,4j,False,"siva",[6,7])
>>> x
(3, 2.3, 4j, False, 'siva', [6, 7])

in tuple object, the insertion order is preserved because of that reason the tuple object is a sequence object.

in python, the tuple object allows duplicate elements.

>>> y=(4,3,4,5,3,6,7,3,4,8,9,7)
>>> y
(4, 3, 4, 5, 3, 6, 7, 3, 4, 8, 9, 7)

the tuple object allows both homogenious and hetrogenious elements.

	homogenious(same/similar type of elements)
	-----------
>>> a=(4,3,7,9)
>>> a
(4, 3, 7, 9)

>>> b=(2.3,4.5,8.1)
>>> b
(2.3, 4.5, 8.1)

	hetrogenious(different type of elements)
	------------
>>> x=(3,2.3,4j,False,"siva",[6,7])
>>> x
(3, 2.3, 4j, False, 'siva', [6, 7])

the tuple object support indexing concept, in python the indexing can be categorized into two types, they are

	1).positive/forward indexing

	2).negative/backward indexing

in tuple object each and every element having unique indexing.

by using indexing concept, we wan retreive only one element from the tuple object at a time.

>>> x=(3,2.3,4j,False,"siva",[6,7])
>>> x
(3, 2.3, 4j, False, 'siva', [6, 7])
>>> x[0]
3
>>> x[3]
False
>>> x[-3]
False
>>> x[4][1]
'i'
>>> x[-1][0]
6

the tuple object supporting slicing concept.

by using slicing concept, we can retreive one or more elements from the tuple object at a time.

>>> x=(3,2.3,4j,False,"siva",[6,7])
>>> x
(3, 2.3, 4j, False, 'siva', [6, 7])
>>> x[:3]
(3, 2.3, 4j)
>>> x[-3:]
(False, 'siva', [6, 7])
>>> x[3:5]
(False, 'siva')
>>> x[2:3]
(4j,)
>>> x[4][:3]
'siv'
>>> x[4][-3:][::-1]
'avi'

we can't update the tuple object elements.

>>> x=(3,2.3,4j,False,"siva",[6,7])
>>> x
(3, 2.3, 4j, False, 'siva', [6, 7])
>>> id(x)
1868263525824
>>> x[0]=30
TypeError: 'tuple' object does not support item assignment
>>> x[4]="krishna"
TypeError: 'tuple' object does not support item assignment
>>> x[-1]=[60,70]
TypeError: 'tuple' object does not support item assignment
>>> x[4][1]='u'
TypeError: 'str' object does not support item assignment
>>> x[-1][0]=60
>>> x
(3, 2.3, 4j, False, 'siva', [60, 7])	


the tuple object support nested tuple mechanism.

	the nested tuple means a tuple object inside another tuple object.

>>> y=((),())
>>> y
((), ())

>>> z=((5,3,7),(6,2,9))
>>> z
((5, 3, 7), (6, 2, 9))
>>> z[1]
(6, 2, 9)
>>> z[0][1]
3

>>> a=(3,4,(5,8,(9,2),7),6)
>>> a
(3, 4, (5, 8, (9, 2), 7), 6)
>>> a[2][2][0]
9
>>> a[-3]
4
>>> a[-2][-2][-1]
2
>>> a[2][1]
8

working with builtin functions:
-------------------------------
>>> x=(5,3,7,2)
>>> x
(5, 3, 7, 2)
>>> len(x)
4
>>> min(x)
2
>>> max(x)
7
>>> sum(x)
17
>>> sorted(x)
[2, 3, 5, 7]
>>> sorted(x,reverse=True)
[7, 5, 3, 2]
>>> reversed(x)
<reversed object at 0x000001B2FD612EC0>
>>> tuple(reversed(x))
(2, 7, 3, 5)

working with tuple class methods:
---------------------------------
if we want to display all the available tuple class methods with syntax and description, in that case we are using help().

	help(tuple)

if we want to display the list of all the available tuple class method names without syntax and description, in that case we are using dir().

	dir(tuple)


count()
-------
to return the no.of occurencess of given element in a tuple object.

	tupleobj.count(element)

ex:
---
>>> x=(10,20,30,10,40,20,10,30,20,10)
>>> x
(10, 20, 30, 10, 40, 20, 10, 30, 20, 10)
>>> x.count(10)
4
>>> x.count(20)
3
>>> x.count(30)
2
>>> x.count(40)
1
>>> x.count(50)
0

index()
-------
to return the positive index of first occurencess of given element in a tuple object from left to right.

	tupleobj.index(element)

ex1:
----
>>> y=(10,20,30,40,50)
>>> y
(10, 20, 30, 40, 50)
>>> y.index(10)
0
>>> y.index(30)
2
>>> y.index(50)
4
>>> y.index(60)
ValueError: tuple.index(x): x not in tuple
>>> y.index()
TypeError: index expected at least 1 argument, got 0

ex2:
----
>>> x=(10,20,30,10,40,20,10,30,20,10)
>>> x
(10, 20, 30, 10, 40, 20, 10, 30, 20, 10)
>>> x.index(10)
0
>>> x.index(20)
1
>>> x.index(30)
2
>>> x.index(10,1)
3
>>> x.index(10,4)
6
>>> x.index(10,4,6)
ValueError: tuple.index(x): x not in tuple
>>> x.index(10,4,7)
6

note:
-----
on top of the tuple object we can't implement the comprihension technique i.e., the tuple object don't supporting comprihension technique.

whenever we are trying to implement the comprihension technique on tuple object, in that case we will get the generator object not a tuple object.



