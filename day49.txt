ex5:
----
>>> x=[1,2,3,[4,5,[6,7]]]
>>> import copy
>>> y=copy.copy(x)
>>> x
[1, 2, 3, [4, 5, [6, 7]]]
>>> y
[1, 2, 3, [4, 5, [6, 7]]]
>>> id(x)
2945906419776
>>> id(y)
2945906406080

	single dimensional
	------------------
>>> x
[1, 2, 3, [4, 5, [6, 7]]]
>>> y
[1, 2, 3, [4, 5, [6, 7]]]
>>> x[0]=10
>>> x
[10, 2, 3, [4, 5, [6, 7]]]
>>> y
[1, 2, 3, [4, 5, [6, 7]]]
>>> y[1]=20
>>> y
[1, 20, 3, [4, 5, [6, 7]]]
>>> x
[10, 2, 3, [4, 5, [6, 7]]]

	multi-dimensional
	-----------------
>>> x
[10, 2, 3, [4, 5, [6, 7]]]
>>> y
[1, 20, 3, [4, 5, [6, 7]]]
>>> x[3][1]=50
>>> x
[10, 2, 3, [4, 50, [6, 7]]]
>>> y
[1, 20, 3, [4, 50, [6, 7]]]
>>> y[-1][-1][-1]=70
>>> y
[1, 20, 3, [4, 50, [6, 70]]]
>>> x
[10, 2, 3, [4, 50, [6, 70]]]

Deep Copy:
-----------
we can implement the Deep Copy by using deepcopy() of copy module.

whenever we are trying to implement the deep copy, in that case both original data and copied data are referenceing to different objects in the memory.

in single dimensional, we can change the original data that is not effected in copied data and vice-versa.

in multi-dimensional, we can change the original data that is not effected in copied data and vice versa.

ex:
---
>>> import copy
>>> a=[1,2,3,[4,5,[6,7]]]
>>> b=copy.deepcopy(a)
>>> a
[1, 2, 3, [4, 5, [6, 7]]]
>>> b
[1, 2, 3, [4, 5, [6, 7]]]
>>> id(a)
2945906403648
>>> id(b)
2945906405120

	single dimensional
	-------------------
>>> a
[1, 2, 3, [4, 5, [6, 7]]]
>>> b
[1, 2, 3, [4, 5, [6, 7]]]
>>> a[0]=10
>>> a
[10, 2, 3, [4, 5, [6, 7]]]
>>> b
[1, 2, 3, [4, 5, [6, 7]]]
>>> b[1]=20
>>> b
[1, 20, 3, [4, 5, [6, 7]]]
>>> a
[10, 2, 3, [4, 5, [6, 7]]]

	multi dimensional
	------------------
>>> a
[10, 2, 3, [4, 5, [6, 7]]]
>>> b
[1, 20, 3, [4, 5, [6, 7]]]
>>> a[3][1]=50
>>> a
[10, 2, 3, [4, 50, [6, 7]]]
>>> b
[1, 20, 3, [4, 5, [6, 7]]]
>>> b[-1][-1][-1]=70
>>> b
[1, 20, 3, [4, 5, [6, 70]]]
>>> a
[10, 2, 3, [4, 50, [6, 7]]]

how to delete an objects?
-------------------------
if we want to delete an objects manually, in that case we are using "del" keyword.

ex1:
----
>>> x=10
>>> y=20
>>> x+y
30
>>> del x
>>> x+y
NameError: name 'x' is not defined


ex2:
----
>>> a=[10,20,30,40,50]
>>> a
[10, 20, 30, 40, 50]
>>> a.remove(30)
>>> a
[10, 20, 40, 50]
>>> a.pop(1)
20
>>> a
[10, 40, 50]
>>> a.pop()
50
>>> a
[10, 40]
>>> del a[1]
>>> a
[10]


			Functions
			----------
what is Function?
----------------
a function is a block of organized,reusable code to perform a particular operation.

		(or)

a function is a syntaxer structure,which is used to represent the business logics to perform a single action.

Advantages of Functions:
------------------------
Function's provides Reusability of code

Function's provides Better Modularity of our applications

Type's of Functions:
--------------------
	1).Builtin/predefined Functions

	2).User-Defined Functions

Builtin/predefined Functions:
------------------------------
these functions are already predefined for some special purpose, we can use that functions only for that particular purpose.

ex:
---
write a python script to print the list of builtin functions?

import builtins
func=[]
for i in dir(builtins):
    if i[0].islower():
        func.append(i)
print(func)
print("="*45)
print(len(func))

output:
-------
['abs', 'aiter', 'all', 'anext', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
=============================================
75


abs()
-----
to return the absolute value of the given number.

	abs(number)

	
ex:
---
>>> abs(5)
5
>>> abs(-2)
2
>>> abs(2.3)
2.3
>>> abs(-3.1)
3.1
>>> abs(2+3j)
3.605551275463989

all()
-----
if all the elements are True in our iterable object then only the all() function to return True otherwise the all() function to return False.

	all(iterableobj)

ex:
---
>>> x="siva"
>>> y=[3,8.2,4j]
>>> z=[9,0,2]
>>> a=[False,9,0]
>>> b=[False,0]
>>> c=34
>>> all(x)
True
>>> all(y)
True
>>> all(z)
False
>>> all(a)
False
>>> all(b)
False
>>> all(c)
TypeError: 'int' object is not iterable

any()
-----
if any one element is True in our iterable object the any() function to return True otherwise the any() function to return False.

	any(iterableobj)

ex:
---
>>> x="siva"
>>> y=[3,8.2,4j]
>>> z=[9,0,2]
>>> a=[False,9,0]
>>> b=[False,0]
>>> c=34
>>> any(x)
True
>>> any(y)
True
>>> any(z)
True
>>> any(a)
True
>>> any(b)
False
>>> any(c)
TypeError: 'int' object is not iterable



