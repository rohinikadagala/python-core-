			Collections
			-----------
List
-----
in python, the list datatype having 'list' class.

we can create a list object by using [] or by calling list() or 		list(iterableobj)

>>> x=[]
>>> x
[]
>>> type(x)
<class 'list'>

>>> y=list()
>>> y
[]
>>> type(y)
<class 'list'>

>>> z=[6,3,7,2]
>>> z
[6, 3, 7, 2]
>>> type(z)
<class 'list'>

>>> a=list("siva")
>>> a
['s', 'i', 'v', 'a']
>>> type(a)
<class 'list'>

>>> b=list((6,3,8,2))
>>> b
[6, 3, 8, 2]
>>> type(b)
<class 'list'>

in python, the list object is a mutable object but it allows both mutable and immutable objects.

>>> x=[2,2.3,4j,False,"siva",(6,7),[8,9]]
>>> x
[2, 2.3, 4j, False, 'siva', (6, 7), [8, 9]]

in list object, the insertion order is preserved because of that reason, the list object is a sequence object.

the list object allows duplicate elements.

>>> y=[4,3,4,6,7,4,3,5,7,3]
>>> y
[4, 3, 4, 6, 7, 4, 3, 5, 7, 3]

the list object allows both homogenious and hetrogenious elements.

	homogenious(similar/same type of elements)
	----------
>>> a=[4,3,7,2,9]
>>> a
[4, 3, 7, 2, 9]

>>> b=[2.3,4.5,9.2,5.1]
>>> b
[2.3, 4.5, 9.2, 5.1]

	hetrogenious(different type of elements)
	------------
>>> x=[2,2.3,4j,False,"siva",(6,7),[8,9]]
>>> x
[2, 2.3, 4j, False, 'siva', (6, 7), [8, 9]]

the list object supporting indexing concept, in python the indexing can be categorized into two types, they are

	1).Positive/Forward Indexing

	2).Negative/Backward Indexing

		Indexing
		    |
	---------------------------------
	|				|
Positive/Forward		Negative/Backward
	|				|
takes from Left to Right	takes from Right to Left
	|				|
starts with 0			starts with -1


in list object each and every element having unique indexing.

	ref fig:list indexing

by using indexing concept, we can retreive only one element from the list object.

>>> x=[2,3.2,4j,False,"siva",(5,6),[9,8]]
>>> x
[2, 3.2, 4j, False, 'siva', (5, 6), [9, 8]]
>>> x[0]
2
>>> x[3]
False
>>> x[4]
'siva'
>>> x[-7]
2
>>> x[-1]
[9, 8]
>>> x[-2]
(5, 6)
>>> x[4][1]
'i'
>>> x[-2][0]
5
>>> x[-1][-1]
8
>>> x[-1][1]
8

the list object supporting slicing concept.

by using slicing concept, we can retreive one or more elements from the list object at a time.

>>> x=[2,3.2,4j,False,"siva",(5,6),[9,8]]
>>> x
[2, 3.2, 4j, False, 'siva', (5, 6), [9, 8]]
>>> x[:3]
[2, 3.2, 4j]
>>> x[-3:]
['siva', (5, 6), [9, 8]]
>>> x[2:5]
[4j, False, 'siva']
>>> x[4:5]
['siva']
>>> x[::-1]
[[9, 8], (5, 6), 'siva', False, 4j, 3.2, 2]
>>> x[4][:3]
'siv'
>>> x[4][-3:][::-1]
'avi'


by using indexing concept,we can update the list object elements.

>>> x=[2,3.2,4j,False,"siva",(5,6),[9,8]]
>>> x
[2, 3.2, 4j, False, 'siva', (5, 6), [9, 8]]

>>> id(x)
1772759194880

>>> x[0]=20
>>> x
[20, 3.2, 4j, False, 'siva', (5, 6), [9, 8]]

>>> id(x)
1772759194880

>>> x[4]="krishna"
>>> x
[20, 3.2, 4j, False, 'krishna', (5, 6), [9, 8]]

>>> id(x)
1772759194880

>>> x[-2]=(50,60,70)
>>> x
[20, 3.2, 4j, False, 'krishna', (50, 60, 70), [9, 8]]

>>> id(x)
1772759194880

>>> x[-1]=[90,80]
>>> x
[20, 3.2, 4j, False, 'krishna', (50, 60, 70), [90, 80]]

>>> id(x)
1772759194880

>>> x[-1][0]=900
>>> x
[20, 3.2, 4j, False, 'krishna', (50, 60, 70), [900, 80]]

>>> x[-2][1]=600
TypeError: 'tuple' object does not support item assignment

>>> x[-3][2]='u'
TypeError: 'str' object does not support item assignment

the list object supporting nested list mechanism i.e., list allows another list.

>>> x=[[],[]]
>>> x
[[], []]


>>> y=[[5,3,7],[9,2,6]]
>>> y
[[5, 3, 7], [9, 2, 6]]
>>> y[1]
[9, 2, 6]
>>> y[0][1]
3
>>> y[-1][-1]
6
>>> y[1][2]
6


>>> z=[5,2.3,[6,4j,[False,"siva"],9],4.5]
>>> z
[5, 2.3, [6, 4j, [False, 'siva'], 9], 4.5]
>>> z[2][2][0]
False
>>> z[-2][-2][-1]
'siva'
>>> z[2][1]
4j
>>> z[2][3]
9
>>> z[2][2][1][1]
'i'

working with builtin functions:
--------------------------------
>>> x=[6,3,7,2]
>>> x
[6, 3, 7, 2]

>>> len(x)
4

>>> min(x)
2

>>> max(x)
7

>>> sum(x)
18

>>> sorted(x)
[2, 3, 6, 7]

>>> sorted(x,reverse=True)
[7, 6, 3, 2]

ex1:
----
wap take the list object as a input from the user and print that list object?

x=eval(input("enter your list: "))
print(x)
print(type(x))

output:
------
enter your list: [3,2.3,4j,False]
[3, 2.3, 4j, False]
<class 'list'>

assignment-1:
--------------
wap take the list object as a input from the user and print the no_of elements into that list,with out using len() function?

	input			output
	-----			-------
	[5,3,8,2]		4

assignment-2:
--------------
wap take the list object as a input from the user and print the sum_of elements into that list,with out using sum() function?

	input			output
	-----			-------
	[5,3,8,2]		18


assignment-3:
--------------
wap take the list object as a input from the user and print the minimum element from that list,with out using min() function?

	input			output
	-----			-------
	[5,3,8,2]		2

assignment-4:
--------------
wap take the list object as a input from the user and print the maximum element from that list,with out using max() function?

	input			output
	-----			-------
	[5,3,8,2]		8

assignment-5:
--------------
wap take the list object as a input from the user and print the elements in ascending order from that list,with out using sorted() function?

	input			output
	-----			-------
	[5,3,8,2]		[2,3,5,8]


>>> reversed(x)
<list_reverseiterator object at 0x0000019CC0ABDB10>
>>> list(reversed(x))
[2, 7, 3, 6]